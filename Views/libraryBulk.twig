{% extends 'baseAdmin.twig' %}
{% block headScripts %}
    <style>
        .donut200{
            height:200px;
            width: 200px;
        }
        .ui-autocomplete-loading {
            background: white url("{{siteUrl}}/images/GIF/ring24.gif") right center no-repeat;
        }

        /*
        Sepcial fix for chosen scrolling left... https://github.com/harvesthq/chosen/issues/1410
        */
        .chosen-container .chosen-drop {
            left:0;
            opacity:0;
            height:0;
            overflow: hidden;
        }
        .chosen-container.chosen-with-drop .chosen-drop {
            opacity:1;
            height:auto;
        }
    </style>
    <link rel="stylesheet" hred="{{siteUrl}}/css/bootstrapAutoCompleteCompatibility.css"/>
    <link rel="stylesheet" href="{{siteUrl}}/js/chosen.css">
    <link rel="stylesheet" href="{{siteUrl}}/js/bootstrap/checkbox/css/bootstrap-checkbox.css">
    <link rel="stylesheet" href="{{siteUrl}}/js/jquery/css/smoothness/jquery-ui-1.10.0.custom.min.css"/>
{% endblock %}
{% block breadcrumb %}
<ol class="breadcrumb">
    <li>
        <i class="fa fa-dashboard"></i>  <a href="/">Dashboard</a>
    </li>
    <li class="active">
        <i class="fa fa-line-chart"></i>{% if search %}
        <a href="/station">System</a>
    </li>
    <li>
        <i class="fa fa-search"></i> Library
        {% else %}
            Library
        {% endif %}
    </li>
</ol>
{% endblock %}
{% block content %}
    {% if flash.error %}
        <div class="row">
            <div class="alert alert-danger">
                <strong>Error</strong> {{flash.error}}
            </div>
        </div>
    {% endif %}
    {% if flash.success %}
        <div class="row">
            <div class="alert alert-success">
                <strong>Success</strong> {{flash.success}}
            </div>
        </div>
    {% endif %}
    <div class="row" id="error" style="display: none">
        <div class="alert alert-danger">
            <strong>Error: </strong><span id="errorText">TEST</span>
        </div>
    </div>
    <form role="form" method="GET">
        <div class="row">
            <div class="form-group input-group" style="z-index: 0;">
                <div class="input-group-addon">CSV Library File</div>
<input type="file" required class="form-control text-center" name="csvFile" id="input"/>
                <span class="input-group-btn"><button class="btn btn-default" type="submit" id="loadHeaders">
                        <i class="fa fa-calculator"></i>&nbsp;Map Headers</button></span>
            </div>
        </div>
        <div>
            <div id="matchArea">
            </div>
            <div id="matchFooter">
                <div class="row">
                    <div class="col-lg-10">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped active" id="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%">
                                <span class="sr-only"></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="pull-right">
                            <input type="button" class="btn btn-default" value="Process" id="process"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
    <form role="form" method="POST">
    <table class='table table-bordered table-hover' style="background-color: ghostwhite">
        <thead id="head">

        </thead>
        <tbody id="list">
        </tbody>
    </table>
<div class="row">
    <div class="col-lg-6">
    </div>
    <div class="col-lg-6">
        <div class="pull-right">
            <input type="submit" class="btn btn-success" value="Submit"/>
        </div>
    </div>
</div>
    </form>
{% endblock %}
{% block lastScripts %}
<script src="{{siteUrl}}/js/chosen.jquery.min.js"></script>
<script src="{{siteUrl}}/vendor/mholt/papaparse/papaparse.js"></script>
<script src="{{siteUrl}}/vendor/glench/fuzzyset.js/lib/fuzzyset.js"></script>
<script type="text/javascript" src="{{siteUrl}}/js/jquery/js/jquery-ui-1.11.0/jquery-ui.min.js"></script>
<script type="text/javascript" src="{{siteUrl}}/js/bootstrap/checkbox/js/bootstrap-checkbox.js "></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/datejs/1.0/date.min.js"></script>
    <div id="dialog-confirm" title="Confirm Overwrite">
        <p><span class="ui-icon ui-icon-alert" style="float:left; margin:12px 12px 20px 0;">
        </span>All changes will be removed and reprocessed, this is irreversible. Are you sure?</p>
    </div>
<script>
    var values = {
        labels: null,
        genres: null,
        categorys: null,
        schedules: null,
        formats: null,
        locales: null
    };
    var labels = function(){return values['labels'];};
    var genres = function(){return values['genres'];};
    var categorys = function(){return values['categorys'];}; //yes this is spelt wrong but it maintains the convention
    var schedules = function(){return values['schedules'];};
    var formats = function(){return values['formats'];};
    var locales = function(){return values['locales'];};
    // levenstein sets
    var labelsSet = FuzzySet();
    var genresSet = FuzzySet();
    var categorysSet = FuzzySet();
    var categorysKeySet = FuzzySet();
    var schedulesSet = FuzzySet();
    var formatsSet = FuzzySet();
    var localesSet = FuzzySet();

    var calls = {
        pending: 0,
        complete: 0
    };

    var expected = {
        "artist": "Artist",
        "album": "Album",
        "genre": "Genre",
        "locale": "Region",
        "label": "Label",
        "category": "Category",
        "schedule": "Schedule",
        "format": "Format",
        "accept": "Keep",
        "print": "Print",
        "playlist": "Playlist",
        "indate": "Date In",
        "reldate": "Release Date",
        "notes": "Notes",
        "VA": "Various Artists"
    };

    function buildHeader(){
        header = $("#head");
        $.each(expected, function(hk, hv){
            header.append("<th>"+hv+"</th>");
        });
    }

    function updateProgress(){
        var valeur = 0;
        try {
            valeur = (calls.complete/calls.pending)*100
        }
        catch (err){
            valeur = 0;
        }
        $('.progress-bar').css('width', valeur+'%').attr('aria-valuenow', valeur);
        if(valeur >= 100){
            $('.progress-bar').removeClass('active');
        }
        else{
            if(!$('.progress-bar').hasClass('active')){
                $('.progress-bar').addClass('active');
            }
        }
    }

    function all(array, condition){
        for(var i = 0; i < array.length; i++){
            if(!condition(array[i])){
                return false;
            }
        }
        return true;
    }

    function isValidDate(dateString) {
        var regEx = /^\d{4}-\d{2}-\d{2}$/;
        return String(dateString).match(regEx) != null;
    }

    function stepSelect(key, vals, translated){
        var select = {"genre": genres(), "locale": locales(), "label": labels(), "format": formats(),
            "schedule": schedules(), "category": categorys()};
        var param = vals[translated];
        if(!param === undefined){

        }
        options = select[translated];
        str += "<select name='"+key+"' class='chosen-select'>";
        ptr = this[key+"sSet"];
        mStr = "";
        if(!(param === undefined || param === null)){
            mStr = String(param);
        }
        matched = null;
        if(ptr && !(param === undefined)){
            matched = ptr.get(mStr);
        }
        if(!matched && this[key+"sKeySet"]){
            ptr = this[key+"sKeySet"];
            matched = ptr.get(mStr);
        }
        $.each(options, function(kx, vx){
            str += "<option value='"+kx+"'";
            if(matched && (matched[0][1] == vx || matched[0][1] == kx)){
                str += " selected ";
            }
            str +=">"+vx+"</option>";
        });
        str += "</select>";
    }

    function stepSelectUpdate(key){
        var td = $('#'+key);
        td.html(stepSelect());
    }

    function stepFn(results, parser){
        stepped++;
        if (results)
        {
            if (results.data)
                rowCount += results.data.length;
                var list = $("#list");
                list.append("<tr id='r_"+rowCount+"'></tr>");
                var row = $("#r_"+rowCount);
                var strings = ['artist', 'album', 'label', 'notes'];
                var dates = ['indate', 'reldate'];
                var bools = ['accept', 'print', 'playlist', 'VA'];
                var select = {"genre": genres(), "locale": locales(), "label": labels(), "format": formats(),
                    "schedule": schedules(), "category": categorys()};
                //var label = '<select name="label" id="label" required="required" class="form-control chosen-select-add">';
                //label += '<option>Self Released</option>';
                //twig inserted
                //{% for label in labels if label!="Self Released"%}
                //label += '<option value="{{label}}">{{label}}</option>';
                //{% endfor %}
                //end twig
                //label += "</select>";
                vals = results.data[0];
                var hasData = false;
                for(var key in expected)
                {
                    var translated = $("#ma_"+key+"_sel").val();
                    var vax = "";
                    if(translated != ""){
                        vax = vals[translated];
                    }
                    var str = "<td id='td_"+translated+"_"+stepped+"'><input value='"+vax+"' readonly>";
                    if(translated && translated.trim() != "" && translated != "N/A" && !(key in select)){
                        if(bools.indexOf(key) > -1)
                        {
                            str += "<input type='checkbox' name='"+key+"[]'";
                            if(!['no', 'false', '0', ''].indexOf(vals[translated]) < 0){
                                str += " checked ";
                            }
                            str += "/>";
                        }
                        else if(dates.indexOf(key) > -1){
                            var dateString = vals[translated];
                            var d = new Date();
                            var month = d.getMonth();
                            var day = d.getDate();
                            try {
                                var dateObj = Date.parse(vals[translated]);
                                if(dateObj != undefined){
                                    var dateString = dateObj.toString("yyyy-MM-dd");
                                }
                            }
                            catch (err){
                                dateString = d.getFullYear() + '-' +
                                        (month<10 ? '0' : '') + month + '-' +
                                        (day<10 ? '0' : '') + day;
                                console.log(err);
                            }
                            if(!isValidDate(dateString)){
                                console.log("invalid date "+dateString+" will use today as default");
                                dateString = d.getFullYear() + '-' +
                                        (month<10 ? '0' : '') + month + '-' +
                                        (day<10 ? '0' : '') + day;
                            }
                            str += "<input value='"+dateString+"' type='date' name='"+key+"'[]";
                            if(dates.indexOf(key) < 3){
                                str += " required ";
                            }
                            str += "/>";
                        }
                        else {
                            str += "<input value='" + vals[translated] + "' id='v_" + key + "_" + rowCount + "' name='" + key + "'[]>";
                        }
                        hasData = true;
                    }
                    else if(key in select){
                        str += "<input type='hidden' value='"+translated+"'>";
                        var param = vals[translated];
                        if(!param === undefined){

                        }
                        options = select[key];
                        str += "<select name='"+key+"[]' class='chosen-select'>";
                        ptr = this[key+"sSet"];
                        mStr = "";
                        if(!(param === undefined || param === null)){
                            mStr = String(param);
                        }
                        matched = null;
                        if(ptr && !(param === undefined)){
                            matched = ptr.get(mStr);
                        }
                        if(!matched && this[key+"sKeySet"]){
                            ptr = this[key+"sKeySet"];
                            matched = ptr.get(mStr);
                        }
                        $.each(options, function(kx, vx){
                            str += "<option value='"+kx+"'[]";
                            if(matched && (matched[0][1] == vx || matched[0][1] == kx)){
                                str += " selected ";
                            }
                            str +=">"+vx+"</option>";
                        });
                        str += "</select>";
                    }
                    else{
                        if(strings.indexOf(key) > -1)
                        {
                            str += "<input value='' type='text' name='"+key+"'[]";
                            if(strings.indexOf(key) < 3){
                                str += " required ";
                            }
                            str += "/>";
                        }
                        else if(dates.indexOf(key) > -1){
                            var d = new Date();
                            var month = d.getMonth();
                            var day = d.getDate();
                            var output = d.getFullYear() + '-' +
                                    (month<10 ? '0' : '') + month + '-' +
                                    (day<10 ? '0' : '') + day;
                            str += "<input value='"+output+"' type='date' name='"+key+"'[]";
                            if(dates.indexOf(key) < 3){
                                str += " required ";
                            }
                            str += "/>";
                        }
                        else if(bools.indexOf(key) > -1)
                        {
                            str += "<input type='checkbox' name='"+key+"'[]";
                            if(bools.indexOf(key) < 1){
                                str += " checked ";
                            }
                            str += "/>";
                        }
                        else{
                            str += "<input value='' type='text' name='"+key+"[]'/>";
                        }
                    }
                    str += "</td>";
                    if(hasData){
                        row.append(str);
                    }
                }
            if (results.errors)
            {
                errorCount += results.errors.length;
                firstError = firstError || results.errors[0];
            }
        }
        $(".chosen-select").chosen();
    }

    function mapHeaders(results, parser) {
        if (results){
            if(results.data)
            {
                a = FuzzySet();
                for(var x in results.data[0]){
                    a.add(x);
                }
                //var matches = a.get(results.data[0]);
                for(var key in expected){
                    var sel = $("#ma_"+key+"_sel");
                    var matchVal = a.get(expected[key]);
                    sel.append("<option>N/A<option>");
                    for(var match in results.data[0])
                    {
                        if(match.trim() == "") continue;
                        var str = "<option value='"+match+"'";
                        if(matchVal && match == matchVal[0][1] && matchVal[0][0] > 0.5){
                            str += " selected "
                        }
                        str += ">"+match+"</option>";
                        sel.append(str);
                    }
                }
            }
            $("#matchArea").show();
            enableButton();
            if(results.errors)
            {
                console.log(results.errors[0])
            }
        }
    }

    function completeFn(results){
        end = now();
        if (results && results.errors)
        {
            if (results.errors)
            {
                errorCount = results.errors.length;
                firstError = results.errors[0];
            }
            if (results.data && results.data.length > 0)
                rowCount = results.data.length;
        }

        printStats("Parse complete");
        console.log("    Results:", results);

        // icky hack
        setTimeout(enableButton, 100);
        $("#matchArea").show();
        enableStep()
    }

    function completeLoad(data, param){
        values[param] = data;
        ptr = this[param+"Set"];
        kptr = this[param+"Set"];
        $.each(data, function(key, value){
            ptr.add(value);
            if(!(kptr === undefined)){
                kptr.add(key);
            }
        });
        //alert(data);
        console.log("set "+param);

        // http://stackoverflow.com/a/23391100
        if(all([labels, genres, categorys, schedules, formats, locales], function(e){return (e()!=null);})){
            enableStep();
        }
        calls.complete += 1;
        updateProgress();
    }

    function errorFn(err, file){
        end = now();
        console.log("ERROR:", err, file);
        enableButton();
    }

    function enableButton()
    {
        $('#loadHeaders').prop('disabled', false);
    }
    function enableStep()
    {
        $('#process').prop('disabled', false);
    }

    function now()
    {
        return typeof window.performance !== 'undefined'
                ? window.performance.now()
                : 0;
    }

    function getData(url, param, callbackFunction, data){
        data = data || null;
        return $.ajax({
            url: url,
            type: "GET",
            dataType: "json",
            success: function(data){
                callbackFunction(data, param)
            },
            beforeSend: function(){
                calls.pending+=1;
            },
            data: data
        });
    }

    function getGenres(){
        return getData('./options/genre', "genres", completeLoad);
    }

    function getLabels(){
        return getData('../../label/', 'labels', completeLoad, {'full':true});
    }

    function getCategories(){ //Is actually government categories
        return getData('../parameters/governmentcodes', 'categorys', completeLoad);
    }

    function getFormats(){
        return getData('../parameters/formats', 'formats', completeLoad);
    }

    function getSchedules(){
        return getData('../parameters/scheduleblocks', 'schedules', completeLoad);
    }

    function getRegions(){
        return getData('../parameters/regions', 'locales', completeLoad);
    }

    function printStats(data){
        console.log(data);
    };

    function processRows(){
        stepped = 0;
        rowCount = 0;
        errorCount = 0;
        firstError = undefined;

        var config = standardConfig(0, stepFn);
        var input = $('#input').val();

        // Allow only one parse at a time
        $(this).prop('disabled', true);
        console.log("--------------------------------------------------");

        if (!$('#input')[0].files.length)
        {
            alert("Please choose at least one file to parse.");
            return enableStep();
        }

        $('#input').parse({
            config: config,
            before: function(file, inputElem)
            {
                start = now();
                console.log("Parsing file...", file);
            },
            error: function(err, file)
            {
                console.log("ERROR:", err, file);
                firstError = firstError || err;
                errorCount++;
            },
            complete: function()
            {
                end = now();
                printStats("Done with all files");
            }
        });
        //enableStep();
    }

    function standardConfig(preview, step) {
        return config = {
                delimiter: $('#delimiter').val(),
                header: true,
                dynamicTyping: true,
                skipEmptyLines: true,
                preview: preview,
                step: step,
                encoding: '',
                worker: $('#worker').prop('checked'),
                comments: '',
                complete: completeFn,
                error: errorFn,
                download: false
        };

    }
    $(function() {
        console.log(expected.length);
        for(var key in expected){
            if(!expected.hasOwnProperty(key)) continue;
            var val = expected[key];
            var panel = $("#matchArea");
            panel.hide();
            panel.append("<div id='ma_"+key+"' class='row col-md-4'></div>");
            var pcont = $("#ma_"+key);
            pcont.append("<div class='form-group input-group' style='z-index: 0;' id='ma_"+key+"_cont'></div>");
            var inGroup = $("#ma_"+key+"_cont");
            inGroup.append("<div class='input-group-addon'>"+expected[key]+"</div>");
            inGroup.append("<select class='form-control' id='ma_"+key+"_sel'></select>");
        }
        buildHeader();
        $('#loadHeaders').click(function()
        {
            if ($(this).prop('disabled') == "true")
                return;

            stepped = 0;
            rowCount = 0;
            errorCount = 0;
            firstError = undefined;

            var config = standardConfig(1, mapHeaders);
            var input = $('#input').val();

            // Allow only one parse at a time
            $(this).prop('disabled', true);
            console.log("--------------------------------------------------");

            if (!$('#input')[0].files.length)
            {
                alert("Please choose at least one file to parse.");
                return enableButton();
            }

            $('#input').parse({
                config: config,
                before: function(file, inputElem)
                {
                    start = now();
                    console.log("Parsing file...", file);
                },
                error: function(err, file)
                {
                    console.log("ERROR:", err, file);
                    firstError = firstError || err;
                    errorCount++;
                },
                complete: function()
                {
                    end = now();
                    printStats("Done with all files");
                }
            });
        });
        $('#process').click(function()
        {
            if ($(this).prop('disabled') == "true")
                return;
            if($("#list").html().trim() != ""){
                $( "#dialog-confirm" ).dialog({
                    resizable: false,
                    height: "auto",
                    width: 400,
                    modal: true,
                    buttons: {
                        "confirm": function() {
                            $( this ).dialog( "close" );
                            processRows();
                        },
                        Cancel: function() {
                            $( this ).dialog( "close" );
                            return;
                        }
                    }
                });
            }
            else
            {
                processRows();
            }
        });
        // Activate chosen elements
        $( ".datepicker" ).datepicker({
            numberOfMonths: 3,
            showButtonPanel: true,
            dateFormat: "yy-mm-dd"
        });
        $( ".datepicker4m" ).datepicker({
            numberOfMonths: 4,
            showButtonPanel: true,
            dateFormat: "yy-mm-dd"
        });
        var cache = {};
        $(".autocomplete").autocomplete({
            source: function( request, response ) {
                var ident = $(this.element).prop("id");
                console.log(ident);
                var term = request.term;
                if ( term in cache ) {
                  response( cache[ term ] );
                  return;
                }
                var url = "../shortcode/available/"+
                        $("#GC_"+ident).text().trim()+
                        "?format="+$("#FMT_"+ident).text().trim()+
                        "&limit=12";
                console.log(url);
                $.getJSON( url,
                request, function( data, status, xhr ) {
                    console.log(data);
                    cache[ term ] = data;
                    response( data );
                });
            }
        });
        $(".autoSelect").on("click", function () {
            $(this).select();
        });
        $("#process").prop('disabled', true);
        console.log("triggering ajax loads");
        getGenres();
        getLabels();
        getCategories();
        getSchedules();
        getFormats();
        getRegions();
        console.log("all ajax calls triggered");
      });
    function verifyShortCode(ident){
        var obj = $("#"+ident);
        var onDate = $("#ONP_"+ident).datepicker('getDate');
        var offDate = $("#OFP_"+ident).datepicker('getDate');
        var error = $("#error");
        var errorText = $("#errorText");
        var val = obj.val()
        console.log("checking "+ident+" for code "+val);
        $.ajax({
            url: "../shortcode/valid",
            data: {
                "code": val,
                "startDate": onDate.toJSON().substring(0,10),
                "endDate": offDate.toJSON().substring(0,10),
                //"startDate": onDate.getFullYear()+"-"+
                //        onDate.getMonth()+"-"+onDate.getDay(),
                //"endDate": offDate.getFullYear()+"-"+
                //        offDate.getMonth()+"-"+offDate.getDay()
            },
        }).error(function (data){
            $("#DIV_"+ident).addClass("has-error");
            errorText.html(data.responseText);
            error.show();
        }).success(function (data){
            $("#DIV_"+ident).removeClass();
            errorText.html("Validation OK");
            error.hide();
        })
    }
</script>
{% endblock %}
